//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Chat.Client.Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="Service.ChatService", CallbackContract=typeof(Chat.Client.Service.ChatServiceCallback))]
    public interface ChatService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ChatService/AttachClient", ReplyAction="urn:ChatService/AttachClientResponse")]
        System.IAsyncResult BeginAttachClient(string name, System.AsyncCallback callback, object asyncState);
        
        void EndAttachClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ChatService/DetachClient", ReplyAction="urn:ChatService/DetachClientResponse")]
        System.IAsyncResult BeginDetachClient(string name, System.AsyncCallback callback, object asyncState);
        
        void EndDetachClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ChatService/Broadcast", ReplyAction="urn:ChatService/BroadcastResponse")]
        System.IAsyncResult BeginBroadcast(string from, string message, System.AsyncCallback callback, object asyncState);
        
        void EndBroadcast(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ChatService/SendMessage", ReplyAction="urn:ChatService/SendMessageResponse")]
        System.IAsyncResult BeginSendMessage(string from, string to, string message, System.AsyncCallback callback, object asyncState);
        
        void EndSendMessage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="urn:ChatService/Notify")]
        void Notify(string from, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="urn:ChatService/NotifyPersonal")]
        void NotifyPersonal(string from, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ChatServiceChannel : Chat.Client.Service.ChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<Chat.Client.Service.ChatService>, Chat.Client.Service.ChatService {
        
        private BeginOperationDelegate onBeginAttachClientDelegate;
        
        private EndOperationDelegate onEndAttachClientDelegate;
        
        private System.Threading.SendOrPostCallback onAttachClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginDetachClientDelegate;
        
        private EndOperationDelegate onEndDetachClientDelegate;
        
        private System.Threading.SendOrPostCallback onDetachClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginBroadcastDelegate;
        
        private EndOperationDelegate onEndBroadcastDelegate;
        
        private System.Threading.SendOrPostCallback onBroadcastCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ChatServiceClient(string endpointConfigurationName) : 
                this(new ChatServiceClientCallback(), endpointConfigurationName) {
        }
        
        private ChatServiceClient(ChatServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public ChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new ChatServiceClientCallback(), binding, remoteAddress) {
        }
        
        private ChatServiceClient(ChatServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public ChatServiceClient() : 
                this(new ChatServiceClientCallback()) {
        }
        
        private ChatServiceClient(ChatServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AttachClientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DetachClientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> BroadcastCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMessageCompleted;
        
        public event System.EventHandler<NotifyReceivedEventArgs> NotifyReceived;
        
        public event System.EventHandler<NotifyPersonalReceivedEventArgs> NotifyPersonalReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Chat.Client.Service.ChatService.BeginAttachClient(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAttachClient(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Chat.Client.Service.ChatService.EndAttachClient(System.IAsyncResult result) {
            base.Channel.EndAttachClient(result);
        }
        
        private System.IAsyncResult OnBeginAttachClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string name = ((string)(inValues[0]));
            return ((Chat.Client.Service.ChatService)(this)).BeginAttachClient(name, callback, asyncState);
        }
        
        private object[] OnEndAttachClient(System.IAsyncResult result) {
            ((Chat.Client.Service.ChatService)(this)).EndAttachClient(result);
            return null;
        }
        
        private void OnAttachClientCompleted(object state) {
            if ((this.AttachClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AttachClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AttachClientAsync(string name) {
            this.AttachClientAsync(name, null);
        }
        
        public void AttachClientAsync(string name, object userState) {
            if ((this.onBeginAttachClientDelegate == null)) {
                this.onBeginAttachClientDelegate = new BeginOperationDelegate(this.OnBeginAttachClient);
            }
            if ((this.onEndAttachClientDelegate == null)) {
                this.onEndAttachClientDelegate = new EndOperationDelegate(this.OnEndAttachClient);
            }
            if ((this.onAttachClientCompletedDelegate == null)) {
                this.onAttachClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAttachClientCompleted);
            }
            base.InvokeAsync(this.onBeginAttachClientDelegate, new object[] {
                        name}, this.onEndAttachClientDelegate, this.onAttachClientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Chat.Client.Service.ChatService.BeginDetachClient(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDetachClient(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Chat.Client.Service.ChatService.EndDetachClient(System.IAsyncResult result) {
            base.Channel.EndDetachClient(result);
        }
        
        private System.IAsyncResult OnBeginDetachClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string name = ((string)(inValues[0]));
            return ((Chat.Client.Service.ChatService)(this)).BeginDetachClient(name, callback, asyncState);
        }
        
        private object[] OnEndDetachClient(System.IAsyncResult result) {
            ((Chat.Client.Service.ChatService)(this)).EndDetachClient(result);
            return null;
        }
        
        private void OnDetachClientCompleted(object state) {
            if ((this.DetachClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DetachClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DetachClientAsync(string name) {
            this.DetachClientAsync(name, null);
        }
        
        public void DetachClientAsync(string name, object userState) {
            if ((this.onBeginDetachClientDelegate == null)) {
                this.onBeginDetachClientDelegate = new BeginOperationDelegate(this.OnBeginDetachClient);
            }
            if ((this.onEndDetachClientDelegate == null)) {
                this.onEndDetachClientDelegate = new EndOperationDelegate(this.OnEndDetachClient);
            }
            if ((this.onDetachClientCompletedDelegate == null)) {
                this.onDetachClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDetachClientCompleted);
            }
            base.InvokeAsync(this.onBeginDetachClientDelegate, new object[] {
                        name}, this.onEndDetachClientDelegate, this.onDetachClientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Chat.Client.Service.ChatService.BeginBroadcast(string from, string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBroadcast(from, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Chat.Client.Service.ChatService.EndBroadcast(System.IAsyncResult result) {
            base.Channel.EndBroadcast(result);
        }
        
        private System.IAsyncResult OnBeginBroadcast(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string from = ((string)(inValues[0]));
            string message = ((string)(inValues[1]));
            return ((Chat.Client.Service.ChatService)(this)).BeginBroadcast(from, message, callback, asyncState);
        }
        
        private object[] OnEndBroadcast(System.IAsyncResult result) {
            ((Chat.Client.Service.ChatService)(this)).EndBroadcast(result);
            return null;
        }
        
        private void OnBroadcastCompleted(object state) {
            if ((this.BroadcastCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BroadcastCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BroadcastAsync(string from, string message) {
            this.BroadcastAsync(from, message, null);
        }
        
        public void BroadcastAsync(string from, string message, object userState) {
            if ((this.onBeginBroadcastDelegate == null)) {
                this.onBeginBroadcastDelegate = new BeginOperationDelegate(this.OnBeginBroadcast);
            }
            if ((this.onEndBroadcastDelegate == null)) {
                this.onEndBroadcastDelegate = new EndOperationDelegate(this.OnEndBroadcast);
            }
            if ((this.onBroadcastCompletedDelegate == null)) {
                this.onBroadcastCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBroadcastCompleted);
            }
            base.InvokeAsync(this.onBeginBroadcastDelegate, new object[] {
                        from,
                        message}, this.onEndBroadcastDelegate, this.onBroadcastCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Chat.Client.Service.ChatService.BeginSendMessage(string from, string to, string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(from, to, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Chat.Client.Service.ChatService.EndSendMessage(System.IAsyncResult result) {
            base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string from = ((string)(inValues[0]));
            string to = ((string)(inValues[1]));
            string message = ((string)(inValues[2]));
            return ((Chat.Client.Service.ChatService)(this)).BeginSendMessage(from, to, message, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            ((Chat.Client.Service.ChatService)(this)).EndSendMessage(result);
            return null;
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(string from, string to, string message) {
            this.SendMessageAsync(from, to, message, null);
        }
        
        public void SendMessageAsync(string from, string to, string message, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        from,
                        to,
                        message}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
        
        private void OnNotifyReceived(object state) {
            if ((this.NotifyReceived != null)) {
                object[] results = ((object[])(state));
                this.NotifyReceived(this, new NotifyReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnNotifyPersonalReceived(object state) {
            if ((this.NotifyPersonalReceived != null)) {
                object[] results = ((object[])(state));
                this.NotifyPersonalReceived(this, new NotifyPersonalReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && ((this.NotifyReceived != null) 
                        || (this.NotifyPersonalReceived != null)))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Chat.Client.Service.ChatService CreateChannel() {
            return new ChatServiceClientChannel(this);
        }
        
        private class ChatServiceClientCallback : object, ChatServiceCallback {
            
            private ChatServiceClient proxy;
            
            public void Initialize(ChatServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void Notify(string from, string message) {
                this.proxy.OnNotifyReceived(new object[] {
                            from,
                            message});
            }
            
            public void NotifyPersonal(string from, string message) {
                this.proxy.OnNotifyPersonalReceived(new object[] {
                            from,
                            message});
            }
        }
        
        private class ChatServiceClientChannel : ChannelBase<Chat.Client.Service.ChatService>, Chat.Client.Service.ChatService {
            
            public ChatServiceClientChannel(System.ServiceModel.DuplexClientBase<Chat.Client.Service.ChatService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAttachClient(string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = name;
                System.IAsyncResult _result = base.BeginInvoke("AttachClient", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAttachClient(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AttachClient", _args, result);
            }
            
            public System.IAsyncResult BeginDetachClient(string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = name;
                System.IAsyncResult _result = base.BeginInvoke("DetachClient", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDetachClient(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DetachClient", _args, result);
            }
            
            public System.IAsyncResult BeginBroadcast(string from, string message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = from;
                _args[1] = message;
                System.IAsyncResult _result = base.BeginInvoke("Broadcast", _args, callback, asyncState);
                return _result;
            }
            
            public void EndBroadcast(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Broadcast", _args, result);
            }
            
            public System.IAsyncResult BeginSendMessage(string from, string to, string message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = from;
                _args[1] = to;
                _args[2] = message;
                System.IAsyncResult _result = base.BeginInvoke("SendMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendMessage", _args, result);
            }
        }
    }
    
    public class NotifyReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NotifyReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string from {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    public class NotifyPersonalReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NotifyPersonalReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string from {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}
